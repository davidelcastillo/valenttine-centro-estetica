
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  username: 'username',
  contraseña: 'contraseña',
  rol: 'rol',
  email: 'email',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn'
};

exports.Prisma.ProvinciaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre'
};

exports.Prisma.LocalidadScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  provinciaId: 'provinciaId'
};

exports.Prisma.ObraSocialScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre'
};

exports.Prisma.PrestacionScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion'
};

exports.Prisma.PacienteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  creadoPorId: 'creadoPorId',
  numeroInterno: 'numeroInterno',
  nombre: 'nombre',
  apellido: 'apellido',
  dni: 'dni',
  fechaNacimiento: 'fechaNacimiento',
  genero: 'genero',
  estadoCivil: 'estadoCivil',
  pais: 'pais',
  provinciaId: 'provinciaId',
  localidadId: 'localidadId',
  barrio: 'barrio',
  calle: 'calle',
  numero: 'numero',
  celular: 'celular',
  email: 'email',
  obraSocialId: 'obraSocialId',
  numeroSocio: 'numeroSocio',
  plan: 'plan',
  estado: 'estado',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn'
};

exports.Prisma.ProfesionalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  creadoPorId: 'creadoPorId',
  numeroInterno: 'numeroInterno',
  nombre: 'nombre',
  apellido: 'apellido',
  dni: 'dni',
  fechaNacimiento: 'fechaNacimiento',
  genero: 'genero',
  estadoCivil: 'estadoCivil',
  pais: 'pais',
  provinciaId: 'provinciaId',
  localidadId: 'localidadId',
  barrio: 'barrio',
  calle: 'calle',
  numero: 'numero',
  celular: 'celular',
  email: 'email',
  titulo: 'titulo',
  matricula: 'matricula',
  especialidad: 'especialidad',
  universidad: 'universidad',
  fechaGraduacion: 'fechaGraduacion',
  horarioTrabajo: 'horarioTrabajo',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn'
};

exports.Prisma.PrestacionXProfesionalScalarFieldEnum = {
  id: 'id',
  profesionalId: 'profesionalId',
  prestacionId: 'prestacionId'
};

exports.Prisma.ObraSocialXProfesionalScalarFieldEnum = {
  id: 'id',
  profesionalId: 'profesionalId',
  obraSocialId: 'obraSocialId'
};

exports.Prisma.TurnoScalarFieldEnum = {
  id: 'id',
  pacienteId: 'pacienteId',
  profesionalId: 'profesionalId',
  fecha: 'fecha',
  hora: 'hora',
  estado: 'estado',
  creadoEn: 'creadoEn'
};

exports.Prisma.DetalleTurnoScalarFieldEnum = {
  id: 'id',
  turnoId: 'turnoId',
  descripcion: 'descripcion',
  observacion: 'observacion',
  creadoEn: 'creadoEn'
};

exports.Prisma.CentroMedicoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  direccion: 'direccion',
  telefono: 'telefono',
  email: 'email'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Rol = exports.$Enums.Rol = {
  RECEPCIONISTA: 'RECEPCIONISTA',
  MEDICO: 'MEDICO',
  GERENTE: 'GERENTE'
};

exports.Genero = exports.$Enums.Genero = {
  FEMENINO: 'FEMENINO',
  MASCULINO: 'MASCULINO',
  OTRO: 'OTRO'
};

exports.EstadoCivil = exports.$Enums.EstadoCivil = {
  SOLTERO: 'SOLTERO',
  CASADO: 'CASADO',
  DIVORCIADO: 'DIVORCIADO',
  VIUDO: 'VIUDO',
  UNION_LIBRE: 'UNION_LIBRE'
};

exports.EstadoPaciente = exports.$Enums.EstadoPaciente = {
  ACTIVO: 'ACTIVO',
  INACTIVO: 'INACTIVO',
  SUSPENDIDO: 'SUSPENDIDO',
  FALLECIDO: 'FALLECIDO'
};

exports.EstadoTurno = exports.$Enums.EstadoTurno = {
  PENDIENTE: 'PENDIENTE',
  CONFIRMADO: 'CONFIRMADO',
  CANCELADO: 'CANCELADO',
  COMPLETADO: 'COMPLETADO'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Provincia: 'Provincia',
  Localidad: 'Localidad',
  ObraSocial: 'ObraSocial',
  Prestacion: 'Prestacion',
  Paciente: 'Paciente',
  Profesional: 'Profesional',
  PrestacionXProfesional: 'PrestacionXProfesional',
  ObraSocialXProfesional: 'ObraSocialXProfesional',
  Turno: 'Turno',
  DetalleTurno: 'DetalleTurno',
  CentroMedico: 'CentroMedico'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
