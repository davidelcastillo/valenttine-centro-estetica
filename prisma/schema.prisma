// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// -----------------------------
// Gestión de Acceso
// -----------------------------
model Usuario {
  id          Int       @id @default(autoincrement())
  username    String    @unique @db.VarChar(11)
  contraseña  String    @db.VarChar(72) // hash bcrypt recomendado
  rol         Rol
  email       String    @unique
  creadoEn    DateTime  @default(now())
  actualizadoEn DateTime @updatedAt

  
  // relación 1:1 al profesional y paciente (si el usuario es un profesional)
  profesional Profesional? @relation("ProfesionalUsuario")

  paciente   Paciente? @relation("PacienteUsuario")
  // relación 1:N: los pacientes creados por este usuario (auditoría)
  pacientesCreados Paciente[] @relation("PacienteCreadoPor") 

  // relación 1:N: los profesionales creados por este usuario (auditoría)
  profesionalesCreados Profesional[] @relation("ProfesionalCreadoPor")
}

enum Rol {
  RECEPCIONISTA
  MEDICO
  GERENTE
}

// -----------------------------
// Ubicación / Geografía
// -----------------------------
model Provincia {
  id         Int         @id @default(autoincrement())
  nombre     String      @unique

  pacientes   Paciente[]
  profesionales Profesional[]
  localidades Localidad[]
}

model Localidad {
  id           Int       @id @default(autoincrement())
  nombre       String
  provinciaId  Int
  provincia    Provincia @relation(fields: [provinciaId], references: [id])

  pacientes    Paciente[]
  profesionales Profesional[]
}

// -----------------------------
// Obras Sociales
// -----------------------------
model ObraSocial {
  id         Int          @id @default(autoincrement())
  nombre     String       @unique
  pacientes  Paciente[]
  profesionales ObraSocialXProfesional[]
}

// -----------------------------
// Prestaciones Médicas
// -----------------------------
model Prestacion {
  id            Int           @id @default(autoincrement())
  nombre        String
  descripcion   String?
  profesionales PrestacionXProfesional[]
}

// -----------------------------
// Pacientes
// -----------------------------
model Paciente {
  id              Int       @id @default(autoincrement())
  userId           Int       @unique
  usuario          Usuario   @relation("PacienteUsuario", fields: [userId], references: [id])
  creadoPorId     Int?
  creadoPor       Usuario?   @relation("PacienteCreadoPor", fields: [creadoPorId], references: [id])
  numeroInterno   String    @unique
  nombre          String
  apellido        String
  dni             String    @unique @db.VarChar(8)
  fechaNacimiento DateTime
  genero          Genero
  estadoCivil     EstadoCivil
  pais            String
  provinciaId     Int
  provincia       Provincia @relation(fields: [provinciaId], references: [id])
  localidadId     Int
  localidad       Localidad @relation(fields: [localidadId], references: [id])
  barrio          String?
  calle           String
  numero          String
  celular         String    @db.VarChar(15)
  email           String
  obraSocialId    Int
  obraSocial      ObraSocial @relation(fields: [obraSocialId], references: [id])
  numeroSocio     String
  plan            String
  estado          EstadoPaciente @default(ACTIVO)
  creadoEn        DateTime  @default(now())
  actualizadoEn   DateTime  @updatedAt

  turnos          Turno[]
}

enum Genero {
  FEMENINO
  MASCULINO
  OTRO
}

enum EstadoCivil {
  SOLTERO
  CASADO
  DIVORCIADO
  VIUDO
  UNION_LIBRE
}

enum EstadoPaciente {
  ACTIVO
  INACTIVO
  SUSPENDIDO
  FALLECIDO
}

// -----------------------------
// Profesionales
// -----------------------------
model Profesional {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  usuario          Usuario   @relation("ProfesionalUsuario", fields: [userId], references: [id])
  creadoPorId     Int?
  creadoPor       Usuario?   @relation("ProfesionalCreadoPor", fields: [creadoPorId], references: [id])
  numeroInterno    String    @unique
  nombre           String
  apellido         String
  dni              String    @unique @db.VarChar(8)
  fechaNacimiento  DateTime
  genero           Genero
  estadoCivil      EstadoCivil
  pais             String
  provinciaId      Int
  provincia        Provincia @relation(fields: [provinciaId], references: [id])
  localidadId      Int
  localidad        Localidad @relation(fields: [localidadId], references: [id])
  barrio           String?
  calle            String
  numero           String
  celular          String    @db.VarChar(15)
  email            String    @unique
  titulo           String
  matricula        String    @unique
  especialidad     String
  universidad      String
  fechaGraduacion  DateTime
  horarioTrabajo   String    // formato JSON (dias y horas)
  creadoEn         DateTime  @default(now())
  actualizadoEn    DateTime  @updatedAt

  obrasSociales    ObraSocialXProfesional[]
  prestaciones     PrestacionXProfesional[]
  turnos           Turno[]
}

// -----------------------------
// Relación N:M Profesionales-Prestaciones
// -----------------------------
model PrestacionXProfesional {
  id             Int           @id @default(autoincrement())
  profesionalId  Int
  prestacionId   Int
  profesional    Profesional   @relation(fields: [profesionalId], references: [id])
  prestacion     Prestacion    @relation(fields: [prestacionId], references: [id])
}

// -----------------------------
// Relación N:M Profesionales-Obras Sociales
// -----------------------------
model ObraSocialXProfesional {
  id             Int           @id @default(autoincrement())
  profesionalId  Int
  obraSocialId   Int
  profesional    Profesional   @relation(fields: [profesionalId], references: [id])
  obraSocial     ObraSocial    @relation(fields: [obraSocialId], references: [id])
}

// -----------------------------
// Turnos
// -----------------------------
model Turno {
  id             Int         @id @default(autoincrement())
  pacienteId     Int
  paciente       Paciente    @relation(fields: [pacienteId], references: [id])
  profesionalId  Int
  profesional    Profesional @relation(fields: [profesionalId], references: [id])
  fecha          DateTime
  hora           String
  estado         EstadoTurno @default(PENDIENTE)
  creadoEn       DateTime    @default(now())
  detalles       DetalleTurno[]
}

enum EstadoTurno {
  PENDIENTE
  CONFIRMADO
  CANCELADO
  COMPLETADO
}

// -----------------------------
// Detalle Turno
// -----------------------------
model DetalleTurno {
  id         Int      @id @default(autoincrement())
  turnoId    Int
  turno      Turno    @relation(fields: [turnoId], references: [id])
  descripcion String
  observacion String?
  creadoEn   DateTime @default(now())
}

// -----------------------------
// Centro Médico
// -----------------------------
model CentroMedico {
  id        Int      @id @default(autoincrement())
  nombre    String
  direccion String
  telefono  String
  email     String
}

